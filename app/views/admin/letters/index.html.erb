<%#
# Index

This view is the template for the index page.
It is responsible for rendering the search bar, header and pagination.
It renders the `_table` partial to display details about the resources.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Collection][1].
  Contains helper methods to help display a table,
  and knows which attributes should be displayed in the resource's table.
- `resources`:
  An instance of `ActiveRecord::Relation` containing the resources
  that match the user's search criteria.
  By default, these resources are passed to the table partial to be displayed.
- `search_term`:
  A string containing the term the user has searched for, if any.
- `show_search_bar`:
  A boolean that determines if the search bar should be shown.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Collection
%>
<%=
  render("index_header",
    resources: resources,
    search_term: search_term,
    page: page,
    show_search_bar: show_search_bar,
    min_date: min_date,
    max_date: max_date
  )
%>
<%= javascript_importmap_tags %>
<form>
  <section style="position: relative; margin-top: 2rem;">
    <div class="field-unit">
      <div class="field-unit__label">
        <label for="start_date">Start Date</label>
      </div>
      <div class="field-unit__field">
        <input data-type="date" type="text" id="start_date" name="start_date">
      </div>
    </div>
    <div class="field-unit">
      <div class="field-unit__label">
        <label for="end_date">End Date</label>
      </div>
      <div class="field-unit__field">
        <input data-type="date" type="text" id="end_date" value="<%= end_date %>" name="end_date">
      </div>
    </div>
    <input type="submit" style="display: none">
  </section>
</form>
<section class="main-content__body main-content__body--flush">
  <%= render(
    "collection",
    collection_presenter: page,
    collection_field_name: resource_name,
    page: page,
    resources: resources,
    table_title: "page-title"
  ) %>
  <%= paginate resources, param_name: '_page' %>
</section>
<script type='module'>
  import moment from 'moment'
  import datepicker from 'js-datepicker'
  const defer = (method) => {
    if (window.jQuery) {
      method();
    } else {
      setTimeout(() => {
        defer(method)
      }, 300);
    }
  }

  const initDateFilter = () => {
    const minField = document.getElementById('start_date');
    const maxField = document.getElementById('end_date');
    try {
      minField.value = moment('<%= start_date %>'.replaceAll('-', '/').split(" ")[0], "YYYY/MMM/DD").format('DD-MM-YYYY');
      maxField.value = moment('<%= end_date %>'.replaceAll('-', '/').split(" ")[0], "YYYY/MMM/DD").format('DD-MM-YYYY');
      const startPicker = new datepicker("#start_date", {
        formatter: (input, date, instance) => {
          const value =  moment(date).format('DD-MM-YYYY');
          input.value = value;
        },
        minDate: new Date('<%= min_date %>'.split(" ")[0]),
        maxDate: new Date('<%= max_date %>'.split(" ")[0]),
        onSelect: (instance) => {
          const newMin = moment(instance.dateSelected).format('YYYY-MM-DD');
          const newMax = moment('<%= end_date %>'.replaceAll('-', '/').split(" ")[0], "YYYY/MMM/DD").format('YYYY-MM-DD');
          const newPath = `/admin/letters?start_date=${newMin}&end_date=${newMax}&search=<%= search_term %>`;
          window.open(newPath, '_self');
        }
      });

      const endPicker = new datepicker("#end_date", {
        formatter: (input, date, instance) => {
          const value =  moment(date).format('DD-MM-YYYY');
          input.value = value;
        },
        minDate: new Date('<%= min_date %>'.split(" ")[0]),
        maxDate: new Date('<%= max_date %>'.split(" ")[0]),
        onSelect: (instance) => {
          const newMin = moment('<%= start_date %>'.replaceAll('-', '/').split(" ")[0], "YYYY/MMM/DD").format('YYYY-MM-DD');
          const newMax = moment(instance.dateSelected).format('YYYY-MM-DD');
          const newPath = `/admin/letters?start_date=${newMin}&end_date=${newMax}&search=<%= search_term %>`;
          window.open(newPath, '_self');
        }
      });

      startPicker.navigate('<%= start_date %>', true);
      endPicker.navigate('<%= end_date %>', true);
    } catch (error) {
      console.error(error)
      // setTimeout(() => {
      //   initDateFilter();
      // }, 300);
    }
  }

  defer(() => {
    initDateFilter();
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set('start_date', moment('<%= start_date %>'.replaceAll('-', '/').split(" ")[0], "YYYY/MMM/DD").format('YYYY-MM-DD'));
    urlParams.set('end_date', moment('<%= end_date %>'.replaceAll('-', '/').split(" ")[0], "YYYY/MMM/DD").format('YYYY-MM-DD'));
    urlParams.set('search', '<%= search_term %>');
    history.replaceState({}, null, `/admin/letters?${urlParams.toString()}`);
  })
</script>
